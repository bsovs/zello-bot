{"version":3,"sources":["serviceWorker.js","ThemeButton.js","Config/config.js","SocketConnection.js","Card.js","httpFactory.js","App.js","Routes/routes.js","index.js","Styles/logo.svg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","COLORS","ThemeButton","props","toggle","prefersDarkScheme","matches","document","body","classList","theme","contains","setIsDark","isDark","localStorage","setItem","handleChangeComplete","color","hex","$","css","localTheme","setState","themeColor","getItem","matchMedia","currentTheme","this","add","Fragment","className","onClick","aria-label","icon","faSun","faMoon","size","width","colors","onChangeComplete","Component","port","protocol","toString","isLocal","Capacitor","platform","API_URL","socket","openSocket","SocketConnection","isWeb","on","setSocketConnected","socketConnected","class","role","faExclamationTriangle","Card","value","App","home","joinRoom","event","preventDefault","Promise","resolve","reject","enableMouseEvents","Routes","exact","path","component","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.365313fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as $ from \"jquery\";\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nimport './Styles/theme.css';\r\n\r\nimport { CirclePicker } from 'react-color';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst COLORS = {PURPLE:'#b082ff', RED:'#F47373', GREEN:'#37D67A', BLUE:'#2CCCE4', ORANGE:'#FFA500'};\r\n\r\nclass ThemeButton extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tlet localTheme = localStorage.getItem(\"themeColor\");\r\n\t\tthis.state = {\r\n\t\t\tprefersDarkScheme: window.matchMedia(\"(prefers-color-scheme: dark)\"),\r\n\t\t\tcurrentTheme: localStorage.getItem(\"theme\"),\r\n\t\t\tlocalTheme: localTheme,\r\n\t\t\tthemeColor: localTheme ? localTheme : COLORS.PURPLE\r\n\t\t};\r\n\t\tthis.props.setIsDark(\r\n\t\t\t(this.state.prefersDarkScheme.matches) ? true : false\r\n\t\t);\r\n\t}\r\n\tasync componentDidMount() {\r\n\t\tif (this.state.currentTheme === \"dark\") {\r\n\t\t\tdocument.body.classList.add(\"dark-theme\");\r\n\t\t\tthis.props.setIsDark(true);\r\n\t\t} else if (this.state.currentTheme === \"light\") {\r\n\t\t\tdocument.body.classList.add(\"light-theme\");\r\n\t\t\tthis.props.setIsDark(false);\r\n\t\t}\r\n\t\tif (this.state.localTheme) {\r\n\t\t\t$('body').css(\"--btn-color\" , this.state.themeColor);\r\n\t\t\t$('body').css(\"--global-color\" , this.state.themeColor);\r\n\t\t}\r\n\t}\r\n\r\n\ttoggle = () => {\r\n\t\tif (this.state.prefersDarkScheme.matches) {\r\n\t\t\tdocument.body.classList.toggle(\"light-theme\");\r\n\t\t\tvar theme = document.body.classList.contains(\"light-theme\")\r\n\t\t\t  ? \"light\"\r\n\t\t\t  : \"dark\";\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.toggle(\"dark-theme\");\r\n\t\t\tvar theme = document.body.classList.contains(\"dark-theme\")\r\n\t\t\t  ? \"dark\"\r\n\t\t\t  : \"light\";\r\n\t\t}\r\n\t\tthis.props.setIsDark(!this.props.isDark);\r\n\t\tlocalStorage.setItem(\"theme\", theme);\r\n\t}\r\n\t\r\n\thandleChangeComplete = (color) => {\r\n\t\tif(color && color.hex){\r\n\t\t\t$('body').css(\"--btn-color\" , color.hex);\r\n\t\t\t$('body').css(\"--global-color\" , color.hex);\r\n\t\t\tif(this.state.localTheme!==color.hex)\r\n\t\t\t\tlocalStorage.setItem(\"themeColor\", color.hex);\r\n\t\t\tthis.setState({ themeColor: color.hex });\r\n\t\t}\r\n\t};\r\n\t\r\n\trender() {\r\n\t\tconst { isDark } = this.props;\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<button className=\"btn float-right\" onClick={this.toggle} aria-label={isDark?'Enable Light-Mode':'Enable Dark-Mode'}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={isDark?faSun:faMoon} size=\"1x\" />\r\n\t\t\t\t</button>\r\n\t\t\t\t<CirclePicker \r\n\t\t\t\t\tclassName=\"float-right\"\r\n\t\t\t\t\twidth ='220px'\r\n\t\t\t\t\tcolors={[COLORS.PURPLE, COLORS.RED, COLORS.GREEN, COLORS.BLUE, COLORS.ORANGE]}\r\n\t\t\t\t\tcolor={ this.state.themeColor }\r\n\t\t\t\t\tonChangeComplete={ this.handleChangeComplete }\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}\r\nexport default ThemeButton;","import openSocket from 'socket.io-client';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\nlet uri = `${window.location.protocol.toString()}//${window.location.hostname.toString()}`;\r\nconst port = `${window.location.port.toString()}`;\r\n\r\nexport let isLocal = false;\r\n\r\nif(window.location.hostname==='localhost' && Capacitor.platform==='web'){\r\n\turi += `:${port}`;\r\n\tisLocal = true;\r\n}\r\n\r\nconst API_URL_REMOTE = `https://pokeweather.herokuapp.com`;\r\nconst API_URL_LOCAL = `http://localhost:8080`;\r\n\r\nexport const API_URL = isLocal ? API_URL_LOCAL : API_URL_REMOTE;\r\nexport const socket = openSocket(`${API_URL}`);\r\n","import React, { Component } from \"react\";\r\n\r\nimport {socket} from \"./Config/config\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass SocketConnection extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\tasync componentDidMount() {\r\n\t\tif(this.props.isWeb){\r\n\t\t\tsocket.on('connect_error', () => {\r\n\t\t\t\tthis.props.setSocketConnected(false).then(() => {\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tsocket.on('connected', () => {\r\n\t\t\t\tthis.props.setSocketConnected(true);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { isWeb, socketConnected } = this.props;\r\n\r\n\t\tif (isWeb && !socketConnected){\r\n\t\t\treturn (\r\n\t\t\t\t<div class=\"alert alert-dismissible  show\" role=\"alert\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faExclamationTriangle} size=\"1x\" />\r\n\t\t\t\t\t<strong>Internet not Connected</strong>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\nexport default SocketConnection;","import React, { Component } from \"react\";\r\nimport * as $ from \"jquery\";\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Spinner, Form, Input } from 'react-bootstrap';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nimport logo from './Styles/logo.svg';\r\nimport './Styles/App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport ThemeButton from './ThemeButton';\r\nimport SocketConnection from './SocketConnection';\r\nimport { http } from './httpFactory';\r\nimport { socket } from './Config/config';\r\n\r\nclass Card extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = props;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\tconst { value } = this.state;\r\n\r\n\t\treturn(\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h2>{value}</h2>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Card;\r\n","import * as $ from \"jquery\";\r\nimport { isLocal, API_URL } from \"./Config/config\";\r\n\r\nclass httpFactory {\r\n\t\r\n}\r\nexport const http = new httpFactory();","import React, { Component } from \"react\";\r\nimport * as $ from \"jquery\";\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Spinner, Form, Input } from 'react-bootstrap';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nimport logo from './Styles/logo.svg';\r\nimport './Styles/App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport Card from './Card';\r\nimport ThemeButton from './ThemeButton';\r\nimport SocketConnection from './SocketConnection';\r\nimport { http } from './httpFactory';\r\nimport { socket } from './Config/config';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisDark: false,\r\n\t\t\tisWeb: Capacitor.platform==='web',\r\n\t\t\tsocketConnected: true\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({\r\n\t\t\tsocketConnected: (this.state.isWeb && this.state.socketConnected===null) ? false : true\r\n\t\t});\r\n\t\t\r\n\t};\r\n\r\n\t//button functions\r\n\thome = () => {\r\n\t\tthis.setState({\r\n\r\n\t\t});\r\n\t}\r\n\tjoinRoom = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tthis.setState({\r\n\t\r\n\t\t});\r\n\t}\r\n\r\n\trender(){\r\n\r\n    const { } = this.state;\r\n\r\n    return(\r\n\t\t<div className=\"App noselect\">\r\n\t\t\t<header>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<SocketConnection\r\n\t\t\t\t\t\tisWeb={this.state.isWeb}\r\n\t\t\t\t\t\tsocketConnected={this.state.socketConnected}\r\n\t\t\t\t\t\tsetSocketConnected={\r\n\t\t\t\t\t\t\t(socketConnected) => {\r\n\t\t\t\t\t\t\t\treturn new Promise((resolve, reject) => { \r\n\t\t\t\t\t\t\t\t\tthis.setState({socketConnected}, resolve()) \r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</span>\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<ThemeButton \r\n\t\t\t\t\t\tisDark={this.state.isDark}\r\n\t\t\t\t\t\tsetIsDark={(isDark)=>this.setState({isDark})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t\r\n\t\t\t\t<h1>Zello Bot</h1>\r\n\r\n\t\t\t\t<SwipeableViews enableMouseEvents>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tvalue=\"Swipe Card -> \"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tvalue=\"Another Card\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tvalue=\"Another one...\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</SwipeableViews>\r\n\r\n\t\t\t</main>\r\n\t\t\t<footer>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tCreated by Brandon Sovran.\r\n\t\t\t\t</p>\r\n\t\t\t</footer>\r\n      </div>\r\n    );}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport App from '../App';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\r\n      <Route exact path='/' component={App}></Route>\r\n    </Switch>\r\n  );\r\n}\r\nexport default Routes;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport HttpsRedirect from 'react-https-redirect';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Routes from './Routes/routes';\r\n\r\nReactDOM.render(\r\n\t<HttpsRedirect>\r\n\t\t<BrowserRouter>\r\n\t\t\t<Routes />\r\n\t\t</BrowserRouter>\r\n\t</HttpsRedirect>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}